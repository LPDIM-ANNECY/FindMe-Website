{% set title = "Gestion des abonnements" %}

{% extends 'layout/base.html.twig' %}
{% set url_edit = path('admin_edit_customer', {id: 0}) %}
{% block body %}
    <div class="container">
        <div class="mx-auto">
            <h2>Clients :</h2>
            <div class="overflow-x-scroll">
                <table>
                    <thead>
                    <tr>
                        <th>Actions</th>
                        {% for key in customers | first | keys %}
                            <th>{{ key }}</th>
                        {% endfor %}
                    </tr>
                    </thead>
                    <tbody>
                    {% for customer in customers %}
                        <tr>
                            <td><i class="las la-2x la-pen cursor-pointer action-edit-customer"
                                   title="Editer le client"></i></td>
                            {% for key, value in customer %}
                                {% if value.timestamp is defined %}
                                    <td class="{{ key }}"
                                        title="{{ value | date('d-m-Y') }}">{{ value | date('d-m-Y') }}</td>
                                {% elseif key == 'roles' %}
                                    <td class="{{ key }}" title="{{ value | join(';') }}">{{ value | join(';') }}</td>
                                {% elseif key == 'locale' and value is not null %}
                                    <td class="{{ key }} d-flex align-items-center" title="{{ value }}"><span
                                                class="flag flag-{{ value }}"></span>&nbsp;{{ value }}</td>
                                {% else %}
                                    <td class="{{ key }}" title="{{ value }}">{{ value }}</td>
                                {% endif %}
                            {% endfor %}
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>

    </div>

    <div class="position-relative d-none edit-customer">
        <div class="loader-bg d-none"><div class="loader lds-ring"><div></div><div></div><div></div><div></div></div></div>
        <i id="edit-close" class="las la-2x la-times cursor-pointer" title="Fermer"></i>
        <div id="content-form" class="p-2"></div>
    </div>

{% endblock %}

{% block javascriptsCustom %}

    <script>
        document.addEventListener('DOMContentLoaded', () =>
        {
            let action_edit_customers = document.querySelectorAll(".action-edit-customer")
            let edit_customer = document.querySelector(".edit-customer")
            let content_form = edit_customer.querySelector("#content-form")
            let edit_close = document.querySelector("#edit-close")
            let loader = edit_customer.querySelector('.loader-bg')

            action_edit_customers.forEach(action_edit_customer =>
            {
                action_edit_customer.addEventListener('click', async (e) =>
                {
                    let tr = e.target.parentNode.parentNode
                    let customer_id = tr.querySelector('.id').textContent

                    let url_form = '{{ path('admin_edit_customer', {id: 'id_customer'}) }}'.replace('id_customer', customer_id)

                    await fetch(url_form).then(response =>
                    {
                        return response.text()
                    }).then(data =>
                    {
                        content_form.innerHTML = data
                    })


                    let form = document.querySelector('form[name=user]')

                    form.setAttribute('action', '{{ url_edit }}' + tr.querySelector('.id').textContent)
                    /*
                    document.querySelector('#number-id').innerText = tr.querySelector('.id').textContent
                    document.querySelector('#user_email').value = tr.querySelector('.email').textContent
                    document.querySelector('#user_company_name').value = tr.querySelector('.company_name').textContent

                    // select option
                    let locale = tr.querySelector('.locale').textContent.trim()
                    removeSelectedOption(document.querySelector('#user_locale'))
                    if(locale.length > 0) {
                        document.querySelector(`#user_locale option[value=${locale}]`).setAttribute('selected', 'selected')
                    }*/

                    edit_customer.classList.remove('d-none')


                    /**
                     * transition doesn't work because of the display none
                     * setTimeout solve this
                     *
                     * The browser is trying to be "smart" here
                     * Adding the setTimeout, even with a 0 second delay, forces the browser to reflow at that point.
                     *
                     * Here i choose the reflow solution
                     */
                    reflow(edit_customer)
                    edit_customer.style.transform = "translateX(0)"

                    form.addEventListener('submit', function (e)
                    {
                        e.preventDefault()
                        loader.classList.remove('d-none')


                        let formData = new FormData(this);

                        fetch(form.getAttribute('action'), {
                            method: 'post',
                            body: formData
                        }).then(response =>
                        {
                            if(response.headers.get("content-type") === "application/json")
                                return response.json()

                            return response.text()
                        }).then(data =>
                        {
                            loader.classList.add('d-none')
                            if(typeof data === "object") {
                                if (data.response.toLowerCase() === 'ok') {
                                    closeEditCustomer(edit_customer)
                                }
                            } else {
                                content_form.innerHTML = data
                            }

                        })
                    })

                })
            })

            edit_close.addEventListener('click', () =>
            {
                closeEditCustomer(edit_customer)
            })

        })

        function reflow(e)
        {
            e.offsetHeight;
        }

        function closeEditCustomer(element)
        {
            element.style = "" // remove transform
        }

        function removeSelectedOption(selectElement)
        {
            selectElement.querySelectorAll('option').forEach(e =>
            {
                e.removeAttribute('selected')
            })
        }
    </script>
{% endblock %}
